import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SalesRender
SALESRENDER_BASE_URL = "https://de.backend.salesrender.com/companies/1123/CRM"
SALESRENDER_API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RlLmJhY2tlbmQuc2FsZXNyZW5kZXIuY29tLyIsImF1ZCI6IkNSTSIsImp0aSI6ImI4MjZmYjExM2Q4YjZiMzM3MWZmMTU3MTMwMzI1MTkzIiwiaWF0IjoxNzU0NzM1MDE3LCJ0eXBlIjoiYXBpIiwiY2lkIjoiMTEyMyIsInJlZiI6eyJhbGlhcyI6IkFQSSIsImlkIjoiMiJ9fQ.z6NiuV4g7bbdi_1BaRfEqDj-oZKjjniRJoQYKgWsHcc"

def client_exists(phone):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict:
      {
        "has_active": True/False,   # –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        "last_order": {...}         # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ ID (–¥–ª—è –∏–Ω—Ñ–æ)
      }
    """
    headers = {
        "Authorization": SALESRENDER_API_KEY,
        "Content-Type": "application/json"
    }

    query = {
        "query": f"""
        query {{
            ordersFetcher(
                filters: {{ include: {{ phones: ["{phone}"] }} }}
                limit: 10
                sort: {{ field: "id", order: DESC }}
            ) {{
                orders {{
                    id
                    status {{ name }}
                    data {{
                        phoneFields {{ value {{ raw }} }}
                    }}
                }}
            }}
        }}
        """
    }

    try:
        resp = requests.post(SALESRENDER_BASE_URL, headers=headers, json=query, timeout=10)
        resp.raise_for_status()
        orders = resp.json().get("data", {}).get("ordersFetcher", {}).get("orders", [])

        if not orders:
            print(f"‚ÑπÔ∏è –î–ª—è {phone} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return {"has_active": False, "last_order": None}

        allowed_statuses = {"–°–ø–∞–º/–¢–µ—Å—Ç", "–û—Ç–º–µ–Ω–µ–Ω", "–ù–µ–¥–æ–∑–≤–æ–Ω 5 –¥–Ω–µ–π", "–ù–µ–¥–æ–∑–≤–æ–Ω", "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å"}

        has_active = any(order["status"]["name"] not in allowed_statuses for order in orders)

        print(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {phone}. –ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–π–¥–µ–Ω? {has_active}")

        return {
            "has_active": has_active,
            "last_order": orders[0]
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ client_exists: {e}")
        return {"has_active": False, "last_order": None}


def create_order(full_name, phone):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –≤ SalesRender –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID –∏–ª–∏ None"""
    mutation = """
    mutation($firstName: String!, $lastName: String!, $phone: String!) {
      orderMutation {
        addOrder(
          input: {
            projectId: 1
            statusId: 1
            orderData: {
              humanNameFields: [
                { field: "name", value: { firstName: $firstName, lastName: $lastName } }
              ]
              phoneFields: [
                { field: "phone", value: $phone }
              ]
            }
          }
        ) {
          id
        }
      }
    }
    """

    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è
    name_parts = full_name.strip().split(" ", 1) if full_name else ["", ""]
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_API_KEY
    }

    variables = {
        "firstName": first_name,
        "lastName": last_name,
        "phone": phone
    }

    try:
        print(f"\n=== create_order –≤—ã–∑–≤–∞–Ω ===")
        print(f"DEBUG: variables = {variables}")
        response = requests.post(
            SALESRENDER_BASE_URL,
            json={"query": mutation, "variables": variables},
            headers=headers,
            timeout=10
        )
        print(f"DEBUG: HTTP {response.status_code}")
        try:
            data = response.json()
            print(f"üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç CRM: {data}")
        except Exception:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ—Ç —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:")
            print(response.text)
            return None

        if "errors" in data:
            print(f"‚ùå CRM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫–∏: {data['errors']}")
            return None

        order_id = data.get("data", {}).get("orderMutation", {}).get("addOrder", {}).get("id")
        if order_id:
            print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, ID={order_id}")
            return order_id
        else:
            print("‚ö†Ô∏è CRM –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID –∑–∞–∫–∞–∑–∞")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ CRM: {e}")
        return None


@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –í—Ö–æ–¥—è—â–∏–π JSON:", data)

    entry = data.get("entry", [])[0]
    changes = entry.get("changes", [])[0]
    value = changes.get("value", {})
    messages = value.get("messages", [])

    if not messages:
        return jsonify({"status": "no messages"}), 200

    msg = messages[0]
    phone = msg.get("from")
    contact = value.get("contacts", [{}])[0]
    name = contact.get("profile", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    text = msg.get("text", {}).get("body", "")
    print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {phone}, —Ç–µ–∫—Å—Ç: {text}")

    # ‚ùå —Ä–∞–Ω—å—à–µ –±—ã–ª–æ —Ç–∞–∫:
    # order_id = create_order(name, phone)

    # ‚úÖ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –Ω–∞—à—É –ª–æ–≥–∏–∫—É
    order_id = process_new_lead(name, phone)

    if order_id:
        print(f"üéâ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚è≥ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

    return jsonify({"status": "ok"}), 200

if __name__ == "__main__": 
    app.run(host="0.0.0.0", port=5000)
