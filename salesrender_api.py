import requests
import traceback
from flask import Flask, request, jsonify

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SalesRender
SALESRENDER_BASE_URL = "https://de.backend.salesrender.com/companies/1123/CRM"
SALESRENDER_API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RlLmJhY2tlbmQuc2FsZXNyZW5kZXIuY29tLyIsImF1ZCI6IkNSTSIsImp0aSI6ImI4MjZmYjExM2Q4YjZiMzM3MWZmMTU3MTMwMzI1MTkzIiwiaWF0IjoxNzU0NzM1MDE3LCJ0eXBlIjoiYXBpIiwiY2lkIjoiMTEyMyIsInJlZiI6eyJhbGlhcyI6IkFQSSIsImlkIjoiMiJ9fQ.z6NiuV4g7bbdi_1BaRfEqDj-oZKjjniRJoQYKgWsHcc"

def get_lead_status(phone):
    """
    –ò—â–µ—Ç –ª–∏–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è REST API, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID –∏ —Å—Ç–∞—Ç—É—Å.
    –ï—Å–ª–∏ –ª–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    print(f"‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {phone} —á–µ—Ä–µ–∑ REST API")
    url = f"{SALESRENDER_BASE_URL}/clients?search={phone}"
    headers = {
        "Authorization": SALESRENDER_API_KEY,
        "Content-Type": "application/json"
    }
    
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        
        clients = data.get("data", [])
        if not clients:
            print(f"üîç –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM ({phone})")
            return None

        client_id = clients[0].get("id")
        print(f"üîç –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")

        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        orders_url = f"{SALESRENDER_BASE_URL}/orders?filter[client_id]={client_id}&sort=created_at&order=desc"
        orders_resp = requests.get(orders_url, headers=headers, timeout=10)
        orders_resp.raise_for_status()
        orders_data = orders_resp.json()
        
        orders = orders_data.get("data", [])
        if orders:
            latest_order = orders[0]
            status_id = latest_order.get("status_id")
            print(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥, ID: {latest_order.get('id')}, —Å—Ç–∞—Ç—É—Å: {status_id}")
            return {'id': latest_order.get('id'), 'statusId': status_id}
        else:
            print(f"üîç –£ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –ª–∏–¥–æ–≤.")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –µ–≥–æ –ª–∏–¥–æ–≤: {e}")
        traceback.print_exc()
        return None

def create_order(full_name, phone):
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –≤ SalesRender
    """
    print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è: {full_name}, {phone}")
    mutation = """
    mutation($firstName: String!, $lastName: String!, $phone: String!) {
      orderMutation {
        addOrder(
          input: {
            projectId: 1
            statusId: 1
            orderData: {
              humanNameFields: [
                { field: "name", value: { firstName: $firstName, lastName: $lastName } }
              ]
              phoneFields: [
                { field: "phone", value: $phone }
              ]
            }
          }
        ) {
          id
        }
      }
    }
    """
    name_parts = full_name.strip().split(" ", 1)
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_API_KEY
    }

    variables = {
        "firstName": first_name,
        "lastName": last_name,
        "phone": phone
    }

    try:
        response = requests.post(SALESRENDER_BASE_URL, json={"query": mutation, "variables": variables}, headers=headers)
        data = response.json()
        print("üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", data)
        if "errors" in data:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {data['errors']}")
            return None
        
        order_id = data["data"]["orderMutation"]["addOrder"]["id"]
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ({full_name}, {phone})")
        return order_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        traceback.print_exc()
        return None

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç 360dialog:", data)

    try:
        entry = data.get("entry", [])
        if not entry:
            return jsonify({"status": "no entry"}), 200

        value = entry[0].get("changes", [])[0].get("value", {})
        messages = value.get("messages", [])
        contacts = value.get("contacts", [])

        phone = None
        name = "–ö–ª–∏–µ–Ω—Ç"

        if messages:
            phone = messages[0].get("from")
        elif contacts:
            phone = contacts[0].get("wa_id")

        if contacts and "profile" in contacts[0]:
            name = contacts[0]["profile"].get("name", "–ö–ª–∏–µ–Ω—Ç")

        if not phone:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return jsonify({"status": "no phone"}), 200

        print(f"üîé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name} —Å –Ω–æ–º–µ—Ä–æ–º {phone}")
        existing_lead = get_lead_status(phone)

        if existing_lead:
            print(f"‚û°Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ CRM. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å: {existing_lead['statusId']}")
            if existing_lead['statusId'] != 1:
                print(f"‚ö†Ô∏è –ï–≥–æ –ª–∏–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Å—Ç–∞—Ç—É—Å {existing_lead['statusId']}). –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
                order_id = create_order(name, phone)
                if not order_id:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
                    return jsonify({"status": "error creating order"}), 500
            else:
                print(f"‚û°Ô∏è –ï–≥–æ –ª–∏–¥ –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Å—Ç–∞—Ç—É—Å {existing_lead['statusId']}). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return jsonify({"status": "client exists and not in processing"}), 200
        else:
            print(f"‚û°Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–¥.")
            order_id = create_order(name, phone)
            if not order_id:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
                return jsonify({"status": "error creating order"}), 500

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ webhook: {e}")
        traceback.print_exc()
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
