import requests
import json
import traceback

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SalesRender ---
# !!! –í–ù–ò–ú–ê–ù–ò–ï: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –°–í–û–ò –ê–ö–¢–£–ê–õ–¨–ù–´–ï !!!
SALESRENDER_BASE_URL = "https://de.backend.salesrender.com/companies/1123/CRM"
SALESRENDER_API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RlLmJhY2tlbmQuc2FsZWRlbnJkZXIuY29tLyIsImF1ZCI6IkNSTSIsImp0aSI6ImI4MjZmYjExM2Q4YjZiMzM3MWZmMTU3MTMwMzI1MTkzIiwiaWF0IjoxNzU0NzM1MDE3LCJ0eXBlIjoiYXBpIiwiY2lkIjoiMTEyMyIsInJlZiI6eyJhbGlhcyI6IkFQSSIsImlkIjoiMiJ9fQ.z6NiuV4g7bbdi_1BaRfEqDj-oZKjjniRJoQYKgWsHcc"

# --- –†–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API ---

def find_client(phone):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ SalesRender –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    url = f"{SALESRENDER_BASE_URL}/clients?search={phone}"
    headers = {
        "Authorization": SALESRENDER_API_KEY,
        "Content-Type": "application/json"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        clients = data.get("data", [])
        return clients[0] if clients else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        traceback.print_exc()
        return None

def is_lead_active(client_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–∏–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ –µ–≥–æ ID —Å—Ç–∞—Ç—É—Å–∞.
    """
    active_status_id = 1
    status_id = client_data.get("statusId")
    return status_id == active_status_id

def client_exists(phone):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ CRM. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py
    –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π –Ω–∞–¥ find_client.
    """
    client = find_client(phone)
    if client:
        print(f"üîç –ö–ª–∏–µ–Ω—Ç {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM.")
        return True
    else:
        print(f"üîç –ö–ª–∏–µ–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM.")
        return False

def create_order(full_name, phone):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –≤ SalesRender."""
    mutation = """
    mutation($firstName: String!, $lastName: String!, $phone: String!) {
      orderMutation {
        addOrder(
          input: {
            projectId: 1
            statusId: 1
            orderData: {
              humanNameFields: [
                { field: "name", value: { firstName: $firstName, lastName: $lastName } }
              ]
              phoneFields: [
                { field: "phone", value: $phone }
              ]
            }
          }
        ) {
          id
        }
      }
    }
    """
    name_parts = full_name.strip().split(" ", 1)
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_API_KEY
    }

    variables = {
        "firstName": first_name,
        "lastName": last_name,
        "phone": phone
    }

    try:
        response = requests.post(SALESRENDER_BASE_URL, json={"query": mutation, "variables": variables}, headers=headers)
        data = response.json()
        if "errors" in data:
            print(f"‚ùå GraphQL –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {data['errors']}")
            return None
        return data["data"]["orderMutation"]["addOrder"]["id"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        traceback.print_exc()
        return None

def fetch_order_from_crm(order_id):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ SalesRender CRM —Å –ø–æ–º–æ—â—å—é GraphQL."""
    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_API_KEY
    }
    query = {
        "query": f"""
        query {{
            ordersFetcher(filters: {{ include: {{ ids: ["{order_id}"] }} }}) {{
                orders {{
                    id
                    data {{
                        humanNameFields {{ value {{ firstName lastName }} }}
                        phoneFields {{ value {{ international raw national }} }}
                    }}
                }}
            }}
        }}
        """
    }
    try:
        response = requests.post(SALESRENDER_BASE_URL, headers=headers, json=query, timeout=10)
        response.raise_for_status()
        data = response.json().get("data", {}).get("ordersFetcher", {}).get("orders", [])
        return data[0] if data else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ CRM: {e}")
        traceback.print_exc()
        return None

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç 360dialog:", json.dumps(data, indent=2))

    try:
        entry = data.get("entry", [])
        if not entry:
            return jsonify({"status": "no entry"}), 200

        value = entry[0].get("changes", [])[0].get("value", {})
        messages = value.get("messages", [])
        contacts = value.get("contacts", [])

        phone = None
        name = "–ö–ª–∏–µ–Ω—Ç"

        if messages:
            phone = messages[0].get("from")
        elif contacts:
            phone = contacts[0].get("wa_id")

        if contacts and "profile" in contacts[0]:
            name = contacts[0]["profile"].get("name", "–ö–ª–∏–µ–Ω—Ç")

        if not phone:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return jsonify({"status": "no phone"}), 200
        
        normalized_phone = normalize_phone_number(phone)
        order_id = process_new_lead(name, normalized_phone)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

def process_new_lead(name, phone):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞, –ø—Ä–æ–≤–µ—Ä—è—è —Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ë–î –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º CRM.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ CRM —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –ª–∏–¥ –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.
    """
    print(f"\n--- ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {name} ({phone}) ---")

    if client_in_db_or_cache(phone):
        print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone} —É–∂–µ –≤ –±–∞–∑–µ/–∫—ç—à–µ –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    client_data = find_client(phone)

    if client_data:
        if is_lead_active(client_data):
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM –∏ –µ–≥–æ –ª–∏–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞—ë–º.")
            save_client_state(phone, name=name, in_crm=True)
            return None
        else:
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM, –Ω–æ –µ–≥–æ –ª–∏–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
            order_id = create_order(name, phone)
            if order_id:
                print(f"üì¶ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {name}.")
                save_client_state(phone, name=name, in_crm=True)
                return order_id
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
                save_client_state(phone, name=name, in_crm=False)
                return None
    else:
        print(f"‚ú® –ö–ª–∏–µ–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
        order_id = create_order(name, phone)
        if order_id:
            print(f"üì¶ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {name}.")
            save_client_state(phone, name=name, in_crm=True)
            return order_id
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
            save_client_state(phone, name=name, in_crm=False)
            return None

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
