import requests
from flask import Flask, request, jsonify
import traceback
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SalesRender ---
# !!! –í–ù–ò–ú–ê–ù–ò–ï: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –°–í–û–ò –ê–ö–¢–£–ê–õ–¨–ù–´–ï !!!
SALESRENDER_BASE_URL = "https://de.backend.salesrender.com/companies/1123/CRM"
SALESRENDER_API_KEY = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RlLmJhY2tlbmQuc2FsZWRlbnJkZXIuY29tLyIsImF1ZCI6IkNSTSIsImp0aSI6ImI4MjZmYjExM2Q4YjZiMzM3MWZmMTU3MTMwMzI1MTkzIiwiaWF0IjoxNzU0NzM1MDE3LCJ0eXBlIjoiYXBpIiwiY2lkIjoiMTEyMyIsInJlZiI6eyJhbGlhcyI6IkFQSSIsImlkIjoiMiJ9fQ.z6NiuV4g7bbdi_1BaRfEqDj-oZKjjniRJoQYKgWsHcc"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≤–µ—Å—å –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ.
app = Flask(__name__)

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞) ---
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏.
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
IN_MEMORY_DB = {}

def normalize_phone_number(phone):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    return ''.join(filter(str.isdigit, phone))

def client_in_db_or_cache(phone):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö/–∫—ç—à–µ.
    """
    print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {phone} –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∞–∑–µ.")
    return phone in IN_MEMORY_DB

def save_client_state(phone, name, in_crm):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    IN_MEMORY_DB[phone] = {
        "name": name,
        "in_crm": in_crm
    }
    print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {name} ({phone}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IN_MEMORY_DB: in_crm={in_crm}")

def find_client(phone):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ SalesRender –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    url = f"{SALESRENDER_BASE_URL}/clients?search={phone}"
    headers = {
        "Authorization": SALESRENDER_API_KEY,
        "Content-Type": "application/json"
    }
    try:
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        print(f"DEBUG: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CRM (find_client): {json.dumps(data, indent=2)}")
        clients = data.get("data", [])
        if clients:
            print(f"üîç –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ CRM ({phone})")
            return clients[0]
        else:
            print(f"üîç –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM ({phone})")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        traceback.print_exc()
        return None

def is_lead_active(client_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–∏–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ –µ–≥–æ ID —Å—Ç–∞—Ç—É—Å–∞.
    """
    active_status_id = 1
    
    status_id = client_data.get("statusId")
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π statusId –∏–∑ CRM: {status_id}")

    if status_id == active_status_id:
        print(f"‚ö†Ô∏è –õ–∏–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ID '{status_id}' —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return True
    else:
        print(f"‚úÖ –õ–∏–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ID '{status_id}' –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
        return False

def create_order(full_name, phone):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑ –≤ SalesRender"""
    mutation = """
    mutation($firstName: String!, $lastName: String!, $phone: String!) {
      orderMutation {
        addOrder(
          input: {
            projectId: 1
            statusId: 1
            orderData: {
              humanNameFields: [
                { field: "name", value: { firstName: $firstName, lastName: $lastName } }
              ]
              phoneFields: [
                { field: "phone", value: $phone }
              ]
            }
          }
        ) {
          id
        }
      }
    }
    """
    name_parts = full_name.strip().split(" ", 1)
    first_name = name_parts[0]
    last_name = name_parts[1] if len(name_parts) > 1 else ""

    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_API_KEY
    }

    variables = {
        "firstName": first_name,
        "lastName": last_name,
        "phone": phone
    }

    try:
        response = requests.post(SALESRENDER_BASE_URL, json={"query": mutation, "variables": variables}, headers=headers)
        data = response.json()
        print("üì¶ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", data)
        if "errors" in data:
            print(f"‚ùå GraphQL –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {data['errors']}")
            return None
        return data["data"]["orderMutation"]["addOrder"]["id"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        traceback.print_exc()
        return None

# --- –§—É–Ω–∫—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ ---
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("\n--- üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç 360dialog ---")
    print(data)

    try:
        entry = data.get("entry", [])
        if not entry:
            return jsonify({"status": "no entry"}), 200

        value = entry[0].get("changes", [])[0].get("value", {})
        messages = value.get("messages", [])
        contacts = value.get("contacts", [])

        phone = None
        name = "–ö–ª–∏–µ–Ω—Ç"

        if messages:
            phone = messages[0].get("from")
        elif contacts:
            phone = contacts[0].get("wa_id")

        if contacts and "profile" in contacts[0]:
            name = contacts[0]["profile"].get("name", "–ö–ª–∏–µ–Ω—Ç")

        if not phone:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return jsonify({"status": "no phone"}), 200
        
        normalized_phone = normalize_phone_number(phone)
        order_id = process_new_lead(name, normalized_phone)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        traceback.print_exc()
        return jsonify({"status": "error"}), 500

    return jsonify({"status": "ok"}), 200

# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ ---
def process_new_lead(name, phone):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞, –ø—Ä–æ–≤–µ—Ä—è—è —Å–Ω–∞—á–∞–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ë–î –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º CRM.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ CRM —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –ª–∏–¥ –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.
    """
    print(f"\n--- ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {name} ({phone}) ---")

    if client_in_db_or_cache(phone):
        print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone} —É–∂–µ –≤ –±–∞–∑–µ/–∫—ç—à–µ –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    client_data = find_client(phone)

    if client_data:
        if is_lead_active(client_data):
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM –∏ –µ–≥–æ –ª–∏–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
            save_client_state(phone, name=name, in_crm=True)
            return None
        else:
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM, –Ω–æ –µ–≥–æ –ª–∏–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
            order_id = create_order(name, phone)
            if order_id:
                print(f"üì¶ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {name}.")
                save_client_state(phone, name=name, in_crm=True)
                return order_id
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
                save_client_state(phone, name=name, in_crm=False)
                return None
    else:
        print(f"‚ú® –ö–ª–∏–µ–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CRM. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.")
        order_id = create_order(name, phone)
        if order_id:
            print(f"üì¶ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {name}.")
            save_client_state(phone, name=name, in_crm=True)
            return order_id
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.")
            save_client_state(phone, name=name, in_crm=False)
            return None

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
