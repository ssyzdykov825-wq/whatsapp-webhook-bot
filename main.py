import os
import requests
from flask import Flask, request, jsonify
from openai import OpenAI

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ø–∞–º—è—Ç–∏
USER_STATE = {}

# –°–∫—Ä–∏–ø—Ç –∫–∞–∫ system_prompt
SALES_SCRIPT_PROMPT = """
–°–µ–Ω Healvix ”©–Ω—ñ–º—ñ–Ω —Å–∞—Ç–∞—Ç—ã–Ω –∫”ô—Å—ñ–±–∏ –∫–µ“£–µ—Å—à—ñ—Å—ñ“£. –ö–ª–∏–µ–Ω—Ç–ø–µ–Ω –∂—ã–ª—ã, —Å–µ–Ω—ñ–º–¥—ñ –∂”ô–Ω–µ –∞–Ω—ã“õ —Å”©–π–ª–µ–π—Å—ñ“£.
–ú–∞“õ—Å–∞—Ç—ã“£ ‚Äî –∫–ª–∏–µ–Ω—Ç–∫–µ –∫”©–∑–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–∞–±–∏“ì–∏ –∫–µ—à–µ–Ω–Ω—ñ“£ –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø, —Å–∞—Ç—É“ì–∞ –∂–µ—Ç–∫—ñ–∑—É.

–ú—ã–Ω–∞ “õ“±—Ä—ã–ª—ã–º–¥—ã “±—Å—Ç–∞–Ω:
1. –°”ô–ª–µ–º–¥–µ—Å—É –∂”ô–Ω–µ –∫—ñ–º –µ–∫–µ–Ω—ñ“£–¥—ñ —Ç–∞–Ω—ã—Å—Ç—ã—Ä—É.
2. –ú”ô—Å–µ–ª–µ–Ω—ñ –Ω–∞“õ—Ç—ã–ª–∞—É ("“õ–∞–Ω–¥–∞–π –±–µ–ª–≥—ñ–ª–µ—Ä –º–∞–∑–∞–ª–∞–π–¥—ã?").
3. “ö–∞—É—ñ–ø—Ç–µ—Ä–¥—ñ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É ("–∫”©—Ä—É “õ–∞–±—ñ–ª–µ—Ç—ñ–Ω—ñ“£ –Ω–∞—à–∞—Ä–ª–∞—É—ã", "–æ–ø–µ—Ä–∞—Ü–∏—è", —Ç.–±.).
4. Healvix —à–µ—à—ñ–º —Ä–µ—Ç—ñ–Ω–¥–µ “±—Å—ã–Ω—É (“õ“±—Ä–∞–º—ã, ”ô—Å–µ—Ä—ñ, –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ).
5. –¢–∞–ø—Å—ã—Ä—ã—Å“õ–∞ –±–∞“ì—ã—Ç—Ç–∞—É (–∂–µ“£—ñ–ª–¥—ñ–∫, –∂–µ—Ç–∫—ñ–∑—É, —Ç”©–ª–µ–º).
6. –ö“Ø–º”ô–Ω —Ç—É—ã–Ω–¥–∞—Å–∞ ‚Äî —Å–µ–Ω—ñ–º–¥—ñ —Ç“Ø—Ä–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—É.
7. –¢–∞–ø—Å—ã—Ä—ã—Å—Ç—ã —Ä”ô—Å—ñ–º–¥–µ–ø, –±–∞–π–ª–∞–Ω—ã—Å –º”ô–ª—ñ–º–µ—Ç—ñ–Ω —Å“±—Ä–∞.

‚ùó–ï–≥–µ—Ä –∫–ª–∏–µ–Ω—Ç “õ—ã—Å“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—Å–µ, –Ω–∞“õ—Ç—ã–ª–∞–ø —Å“±—Ä–∞.  
‚ùó–ñ–∞—É–∞–ø —Ç—ã–º “±–∑–∞“õ –±–æ–ª—Å–∞ ‚Äî –±”©–ª–µ –æ—Ç—ã—Ä—ã–ø 2‚Äì3 —Ö–∞–±–∞—Ä–ª–∞–º–∞“ì–∞ –∂–∞–∑.  
‚ùó–°“±—Ö–±–∞—Ç—Ç—ã –±—ñ—Ä—Ç—ñ–Ω–¥–µ–ø –∂“Ø—Ä–≥—ñ–∑, —Å–∫—Ä–∏–ø—Ç—Ç—ñ“£ –±–∞—Ä–ª—ã“õ –∫–µ–∑–µ“£–¥–µ—Ä—ñ–Ω–µ–Ω ”©—Ç–∫—ñ–∑—É–≥–µ —Ç—ã—Ä—ã—Å.
"""

def split_message(text, max_length=1000):
    """–î–µ–ª–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ."""
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind(". ")
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

def send_whatsapp_message(phone, message):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
    print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.text}")
    return response

def get_gpt_response(user_msg, user_phone):
    try:
        history = USER_STATE.get(user_phone, {}).get("history", [])
        messages = [{"role": "system", "content": SALES_SCRIPT_PROMPT}]
        for item in history:
            messages.append({"role": "user", "content": item["user"]})
            messages.append({"role": "assistant", "content": item["bot"]})
        messages.append({"role": "user", "content": user_msg})

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        USER_STATE[user_phone] = {
            "history": history[-5:] + [{"user": user_msg, "bot": reply}],
            "last_message": user_msg
        }

        return reply
    except Exception as e:
        print(f"‚ùå GPT “õ–∞—Ç–µ—Å—ñ: {e}")
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞–∑—ñ—Ä –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–π–º—ã–Ω. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑."

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ö–µ–ª–≥–µ–Ω JSON:", data)

    try:
        messages = data["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            msg = messages[0]
            user_phone = msg["from"]
            user_msg = msg["text"]["body"]

            print(f"üí¨ {user_phone}: {user_msg}")

            # –ü–æ–≤—Ç–æ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if USER_STATE.get(user_phone, {}).get("last_message") == user_msg:
                print("‚ö†Ô∏è “ö–∞–π—Ç–∞–ª–∞—É ‚Äî ”©—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä–µ–º—ñ–∑")
                return jsonify({"status": "duplicate"}), 200

            reply = get_gpt_response(user_msg, user_phone)
            for part in split_message(reply):
                send_whatsapp_message(user_phone, part)

    except Exception as e:
        print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ “õ–∞—Ç–µ—Å—ñ: {e}")

    return jsonify({"status": "ok"}), 200

@app.route('/', methods=['GET'])
def home():
    return "Healvix –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
