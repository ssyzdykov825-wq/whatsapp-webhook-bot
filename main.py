import os
import time
import threading
import requests
from flask import Flask, request, jsonify
from openai import OpenAI
    
app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

USER_STATE = {}

# sales_prompts.py

SALES_SCRIPT_PROMPT = """
–°–µ–Ω ‚Äî –î–∞—É—Ä–µ–Ω –µ—Å—ñ–º–¥—ñ Healvix –∫”©–∑ –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω—ã“£ –∫–µ“£–µ—Å—à—ñ—Å—ñ—Å—ñ“£. –ú—ñ–Ω–¥–µ—Ç—ñ“£ ‚Äî –∫–ª–∏–µ–Ω—Ç—Ç—ñ –±“Ø–≥—ñ–Ω —à–µ—à—ñ–º “õ–∞–±—ã–ª–¥–∞—É“ì–∞ –∂–µ—Ç–∫—ñ–∑—É. –°–µ–Ω —Ç—ñ—Ä—ñ –∞–¥–∞–º —Å–∏—è“õ—Ç—ã —Å”©–π–ª–µ–π—Å—ñ“£: –∂—ã–ª—ã, —Å–µ–Ω—ñ–º–¥—ñ, –∫–µ–π–¥–µ —ç–º–æ—Ü–∏—è–º–µ–Ω “õ—ã—Å—ã–º –∂–∞—Å–∞–ø.  

üìå –°—Ç–∏–ª—å:  
- –ñ—ã–ª—ã, —Å–µ–Ω—ñ–º–¥—ñ, “õ–∞–∂–µ—Ç –∫–µ–∑–¥–µ “õ–∞—Ç–∞“£.  
- “ö–∞—É—ñ–ø—Ç—ñ –Ω–∞“õ—Ç—ã –∫”©—Ä—Å–µ—Ç—É (“õ–æ—Ä“õ—ã–Ω—ã—à + –º—ã—Å–∞–ª).  
- –£–∞“õ—ã—Ç —à–µ–∫—Ç–µ—É—ñ (¬´—Å–æ“£“ì—ã “õ–æ—Ä–∞–ø¬ª, ¬´—Ç–µ–∫ –±“Ø–≥—ñ–Ω –∂–µ“£—ñ–ª–¥—ñ–∫¬ª).  
- –ö–µ–∑ –∫–µ–ª–≥–µ–Ω —Å—ã–ª—Ç–∞—É“ì–∞ –¥–∞–π—ã–Ω –∂–∞—É–∞–ø.  
- ”ò—Ä“õ–∞—à–∞–Ω “õ–∞–∑—ñ—Ä –∑–∞–∫–∞–∑ –±–µ—Ä—É–≥–µ –±–∞“ì—ã—Ç—Ç–∞—É.  

üìå –ú—ñ–Ω–¥–µ—Ç—Ç—ñ —Ñ—Ä–∞–∑–∞–ª–∞—Ä:  
- ¬´–ë“±–ª –∂–∞–π –¥”ô—Ä—ñ –µ–º–µ—Å, –∫”©—Ä—É—ñ“£—ñ–∑–¥—ñ —Å–∞“õ—Ç–∞–π—Ç—ã–Ω –º“Ø–º–∫—ñ–Ω–¥—ñ–∫.¬ª  
- ¬´–ö–µ—à—ñ–∫—Ç—ñ—Ä—Å–µ“£—ñ–∑, –µ—Ä—Ç–µ“£ –∫–µ—à –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω.¬ª  
- ¬´–°–æ“£“ì—ã “õ–æ—Ä–∞–ø—Ç–∞—Ä “ì–∞–Ω–∞ “õ–∞–ª–¥—ã.¬ª  

üìå –¢—ã–π—ã–º —Å–∞–ª—ã–Ω“ì–∞–Ω:  
- –†–æ–±–æ—Ç —Å–∏—è“õ—Ç—ã —Å”©–π–ª–µ—É  
- –°—É—ã“õ, —ç–º–æ—Ü–∏—è—Å—ã–∑ –∂–∞—É–∞–ø  
- –ö–ª–∏–µ–Ω—Ç—Ç—ñ ¬´–∫–µ–π—ñ–Ω¬ª –∂—ñ–±–µ—Ä—É  

üìå ”®–Ω—ñ–º:  
- 1 “õ–æ—Ä–∞–ø ‚Äî 9 990 ‚Ç∏  
- 3 “õ–æ—Ä–∞–ø (–∞–∫—Ü–∏—è) ‚Äî 21 990 ‚Ç∏  
- –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî 1 500‚Äì2 000 ‚Ç∏, “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –±–æ–π—ã–Ω—à–∞  
- “ö“±—Ä–∞–º—ã: “õ–∞—Ä–∞–∂–∏–¥–µ–∫, –∫–∞–ª–µ–Ω–¥—É–ª–∞, –æ—á–∞–Ω–∫–∞, –∂“Ø–∑—ñ–º —Å“Ø–π–µ–≥—ñ, —Å”ô–±—ñ–∑, —Ç–µ“£—ñ–∑ –∫—ñ—Ä–ø—ñ—Å—ñ + –¥”ô—Ä—É–º–µ–Ω–¥–µ—Ä  
- ”ò—Å–µ—Ä—ñ: –∫”©—Ä—É–¥—ñ –∂–∞“õ—Å–∞—Ä—Ç–∞–¥—ã, “õ–∞–±—ã–Ω—É–¥—ã –∞–∑–∞–π—Ç–∞–¥—ã, –∫–∞—Ç–∞—Ä–∞–∫—Ç–∞/–≥–ª–∞—É–∫–æ–º–∞ –∞–ª–¥—ã–Ω –∞–ª–∞–¥—ã  
- “ö–∞—Ä—Å—ã –∫”©—Ä—Å–µ—Ç—ñ–ª—ñ–º: –æ–Ω–∫–æ–ª–æ–≥–∏—è, —Å—Ç–µ–Ω—Ç, –±–∞–ª–∞ –µ–º—ñ–∑—É  
"""

STAGE_PROMPTS = {
    "0": "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! üëã “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π? –ú–µ–Ω—ñ“£ –∞—Ç—ã–º –î–∞—É—Ä–µ–Ω, Healvix –∫”©–∑ –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω—ã“£ –º–∞–º–∞–Ω—ã–º—ã–Ω. –ï—Å—ñ–º—ñ“£—ñ–∑ –∫—ñ–º? –ö”©–∑—ñ“£—ñ–∑–¥–µ “õ–∞–Ω–¥–∞–π –±–µ–ª–≥—ñ–ª–µ—Ä –±–∞—Ä?",
    
    "1": "–ñ–∞–ª–ø—ã, –∫”©—Ä—É—ñ“£—ñ–∑–¥–µ “õ–∞–Ω–¥–∞–π ”©–∑–≥–µ—Ä—ñ—Å—Ç–µ—Ä –±–∞–π“õ–∞–¥—ã“£—ã–∑? üëÅÔ∏è –ë“±–ª–¥—ã—Ä–ª–∞—É, “±—Å–∞“õ ”ô—Ä—ñ–ø—Ç–µ—Ä–¥—ñ –∫”©—Ä–º–µ—É, –∂–∞—Ä—ã“õ“õ–∞ —Å–µ–∑—ñ–º—Ç–∞–ª–¥—ã“õ –±–∞—Ä –º–∞?",
    
    "2": "–ë“±–ª “õ–∞—à–∞–Ω –±–∞—Å—Ç–∞–ª–¥—ã? –î”ô—Ä—ñ–≥–µ—Ä–≥–µ “õ–∞—Ä–∞–ª–¥—ã“£—ã–∑ –±–∞? ‚è≥ –ö”©–ø –∞–¥–∞–º –∫–µ—à—ñ–∫—Ç—ñ—Ä—ñ–ø, –∫–∞—Ç–∞—Ä–∞–∫—Ç–∞“ì–∞ –¥–µ–π—ñ–Ω –∂–µ—Ç–∫—ñ–∑–µ–¥—ñ. –ï—Ä—Ç–µ “õ–æ–ª“ì–∞ –∞–ª—Å–∞“õ, –Ω”ô—Ç–∏–∂–µ ”ô–ª–¥–µ“õ–∞–π–¥–∞ –∂–∞“õ—Å—ã –±–æ–ª–∞–¥—ã.",
    
    "3": "–ö”©–∑ ‚Äî –Ω”ô–∑—ñ–∫ –º“Ø—à–µ. –£–∞“õ—Ç—ã–ª—ã –µ–º –±–æ–ª–º–∞—Å–∞, –∞—Å“õ—ã–Ω—ã–ø –æ–ø–µ—Ä–∞—Ü–∏—è“ì–∞ –∞–ø–∞—Ä–∞–¥—ã. –ë—ñ—Ä–∞“õ –¥“±—Ä—ã—Å –µ–º–¥—ñ –µ—Ä—Ç–µ –±–∞—Å—Ç–∞—Å–∞“£—ã–∑, –∫”©—Ä—É —Å–∞–ø–∞—Å—ã –∂–∞“õ—Å–∞—Ä–∞–¥—ã. 45 –∂–∞—Å—Ç–∞“ì—ã –∫–ª–∏–µ–Ω—Ç—ñ–º—ñ–∑ —É–∞“õ—ã—Ç—ã–Ω–¥–∞ –±–∞—Å—Ç–∞–¥—ã, “õ–∞–∑—ñ—Ä –∫”©–ª—ñ–∫ –∞–π–¥–∞–ø –∂“Ø—Ä.",
    
    "4": "–°—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ—Ç—ñ–Ω ”©–Ω—ñ–º ‚Äî Healvix üåøüíä. 100% —Ç–∞–±–∏“ì–∏: “õ–∞—Ä–∞–∂–∏–¥–µ–∫, –∫–∞–ª–µ–Ω–¥—É–ª–∞, –æ—á–∞–Ω–∫–∞, –∂“Ø–∑—ñ–º —Å“Ø–π–µ–≥—ñ, —Å”ô–±—ñ–∑, —Ç–µ“£—ñ–∑ –∫—ñ—Ä–ø—ñ—Å—ñ –∂”ô–Ω–µ –¥”ô—Ä—É–º–µ–Ω–¥–µ—Ä. –ë“±–ª –∫”©–∑–¥—ñ“£ “õ–∞–Ω –∞–π–Ω–∞–ª—ã–º—ã–Ω –∂–∞“õ—Å–∞—Ä—Ç—ã–ø, —Ç–æ—Ä “õ–∞–±—ã“õ—Ç—ã “õ–æ—Ä–µ–∫—Ç–µ–Ω–¥—ñ—Ä–µ–¥—ñ.",
    
    "5": "–ë–∞“ì–∞: 1 “õ–æ—Ä–∞–ø ‚Äî 9 990 ‚Ç∏, –∞–ª –∞–∫—Ü–∏—è–º–µ–Ω 3 “õ–æ—Ä–∞–ø ‚Äî 21 990 ‚Ç∏. üéÅ –ñ–µ“£—ñ–ª–¥—ñ–∫ —É–∞“õ—ã—Ç—à–∞, “õ–æ–π–º–∞–¥–∞ —Å–æ“£“ì—ã “õ–æ—Ä–∞–ø—Ç–∞—Ä “õ–∞–ª–¥—ã. –ë“Ø–≥—ñ–Ω “Ø–ª–≥–µ—Ä—ñ–ø –∞–ª—ã“£—ã–∑.",
    
    "6": "–ö“Ø–º”ô–Ω –±–æ–ª—Å–∞ ‚Äî –∞–π—Ç—ã“£—ã–∑. –ë–∞“ì–∞“ì–∞ “õ–∞—Ç—ã—Å—Ç—ã: –±—ñ–∑ –∞–¥–∞–ª —Å–∞—Ç–∞–º—ã–∑, “õ–æ–ª–¥–∞–Ω “õ—ã–º–±–∞—Ç—Ç–∞—Ç–ø–∞–π–º—ã–∑. –ê“õ—à–∞ –∞–∑ –±–æ–ª—Å–∞ ‚Äî –±”©–ª—ñ–ø —Ç”©–ª–µ—É –±–∞—Ä. –ï“£ –¥“±—Ä—ã—Å—ã ‚Äî –µ–º–¥—ñ —Å–æ–∑–±–∞–π –±–∞—Å—Ç–∞—É. –°—ñ–∑–≥–µ —ã“£“ì–∞–π–ª—ã—Å—ã “õ–∞–π—Å—ã ‚Äî 1 “õ–æ—Ä–∞–ø –ø–∞, ”ô–ª–¥–µ 3 “õ–æ—Ä–∞–ø –ø–∞?"
}

FAQ_PROMPTS = {
    "–ë–∞“ì–∞ “õ–∞–Ω—à–∞?": "1 “õ–æ—Ä–∞–ø ‚Äî 9 990 ‚Ç∏. –ê–ª “õ–∞–∑—ñ—Ä –∞–∫—Ü–∏—è–º–µ–Ω 3 “õ–æ—Ä–∞–ø ‚Äî –±–∞—Ä –±–æ–ª“ì–∞–Ω—ã 21 990 ‚Ç∏ üéÅ",
    "–ù–µ–≥–µ –∞—Ä–∑–∞–Ω?": "–ë—ñ–∑ –∞–¥–∞–ª —Å–∞—Ç–∞–º—ã–∑. –ë–∞“ì–∞–Ω—ã “õ–æ–ª–¥–∞–Ω “õ—ã–º–±–∞—Ç—Ç–∞—Ç–ø–∞–π–º—ã–∑, –Ω–∞—É“õ–∞—Å—Ç–∞—Ä–¥—ã“£ –∞—É—Ä—É—ã–º–µ–Ω –æ–π–Ω–∞–º–∞–π–º—ã–∑.",
    "“ö“±—Ä–∞–º—ã “õ–∞–Ω–¥–∞–π?": "100% —Ç–∞–±–∏“ì–∏: “õ–∞—Ä–∞–∂–∏–¥–µ–∫, –∫–∞–ª–µ–Ω–¥—É–ª–∞, –æ—á–∞–Ω–∫–∞, –∂“Ø–∑—ñ–º —Å“Ø–π–µ–≥—ñ, —Å”ô–±—ñ–∑, —Ç–µ“£—ñ–∑ –∫—ñ—Ä–ø—ñ—Å—ñ –∂”ô–Ω–µ –¥”ô—Ä—É–º–µ–Ω–¥–µ—Ä (A, B, C, D, E).",
    "–ö–∞—Ç–∞—Ä–∞–∫—Ç–∞“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ –º–µ?": "–ò”ô, –∫–∞—Ç–∞—Ä–∞–∫—Ç–∞–Ω—ã“£ –∞–ª–¥—ã–Ω –∞–ª—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ–¥—ñ. –ë—ñ—Ä–∞“õ “õ–∞—Ä—Å—ã –∫”©—Ä—Å–µ—Ç—ñ–ª—ñ–º –±–æ–ª–º–∞—Å–∞ “ì–∞–Ω–∞.",
    "–ì–ª–∞—É–∫–æ–º–∞“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å–µ –º–µ?": "–ò”ô, –∫”©—Ä—É–¥—ñ –∂–∞“õ—Å–∞—Ä—Ç—ã–ø, –∫”©–∑ “õ—ã—Å—ã–º—ã–Ω —Ç”©–º–µ–Ω–¥–µ—Ç—É–≥–µ ”ô—Å–µ—Ä –µ—Ç–µ–¥—ñ.",
    "“ö–∞—Ä—Å—ã –∫”©—Ä—Å–µ—Ç—ñ–ª—ñ–º –±–∞—Ä –º–∞?": "–û–Ω–∫–æ–ª–æ–≥–∏—è—Å—ã –±–∞—Ä–ª–∞—Ä“ì–∞, –∂“Ø—Ä–µ–≥—ñ–Ω–¥–µ —Å—Ç–µ–Ω—Ç –±–∞—Ä–ª–∞—Ä“ì–∞ –∂”ô–Ω–µ –±–∞–ª–∞ –µ–º—ñ–∑—ñ–ø –∂“Ø—Ä–≥–µ–Ω ”ô–π–µ–ª–¥–µ—Ä–≥–µ –±–æ–ª–º–∞–π–¥—ã.",
    "“ö–∞–ª–∞–π —ñ—à—É –∫–µ—Ä–µ–∫?": "“ö–∞–ø—Ç–∞–º–∞–¥–∞ 60 –∫–∞–ø—Å—É–ª–∞ –±–∞—Ä. –ö“Ø–Ω—ñ–Ω–µ 2 –∫–∞–ø—Å—É–ª–∞–¥–∞–Ω “õ–∞–±—ã–ª–¥–∞–π—Å—ã–∑.",
    "–ñ–µ—Ç–∫—ñ–∑—É “õ–∞–ª–∞–π?": "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –±–∞—Ä–ª—ã“õ –∞–π–º–∞“ì—ã–Ω–∞ –∂–µ—Ç–∫—ñ–∑–µ–º—ñ–∑ üöö. –ë–∞“ì–∞—Å—ã 1 500‚Äì2 000 ‚Ç∏."
}

def split_message(text, max_length=1000):
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind(". ")
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

def send_whatsapp_message(phone, message):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
    print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.text}")
    return response

def get_gpt_response(user_msg, user_phone):
    try:
        user_data = USER_STATE.get(user_phone, {})
        history = user_data.get("history", [])
        stage = user_data.get("stage", "0")

        prompt = SALES_SCRIPT_PROMPT + "\n\n" + STAGE_PROMPTS.get(stage, "")

        messages = [{"role": "system", "content": prompt}]
        for item in history:
            messages.append({"role": "user", "content": item["user"]})
            messages.append({"role": "assistant", "content": item["bot"]})
        messages.append({"role": "user", "content": user_msg})

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()

        next_stage = str(int(stage) + 1) if int(stage) < 6 else "6"

        USER_STATE[user_phone] = {
            "history": history[-5:] + [{"user": user_msg, "bot": reply}],
            "last_message": user_msg,
            "stage": next_stage,
            "last_time": time.time(),
            "followed_up": False
        }

        return reply
    except Exception as e:
        print(f"‚ùå GPT “õ–∞—Ç–µ—Å—ñ: {e}")
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞–∑—ñ—Ä –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–π–º—ã–Ω. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑."

FOLLOW_UP_DELAY = 60
FOLLOW_UP_MESSAGE = "–°—ñ–∑–¥–µ–Ω –∂–∞—É–∞–ø –±–æ–ª–º–∞–π –∂–∞—Ç—ã—Ä ü§î –°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω–º—ã–Ω."

def follow_up_checker():
    while True:
        now = time.time()
        for phone, state in list(USER_STATE.items()):
            last_time = state.get("last_time")
            last_stage = state.get("stage", "0")
            if last_time:
                elapsed = now - last_time
                print(f"[‚è±Ô∏è] –ü—Ä–æ–≤–µ—Ä–∫–∞: {phone}, –ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫")
                if elapsed > FOLLOW_UP_DELAY and not state.get("followed_up"):
                    print(f"[üîî] –û—Ç–ø—Ä–∞–≤–∫–∞ follow-up –∫–ª–∏–µ–Ω—Ç—É {phone}")
                    send_whatsapp_message(phone, "üìå –ê–π–¥–æ—Å: " + FOLLOW_UP_MESSAGE)
                    USER_STATE[phone]["followed_up"] = True
        time.sleep(30)

def start_followup_thread():
    if not hasattr(app, 'followup_started'):
        app.followup_started = True
        thread = threading.Thread(target=follow_up_checker, daemon=True)
        thread.start()
        print("üü¢ follow-up checker –∑–∞–ø—É—â–µ–Ω")

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ö–µ–ª–≥–µ–Ω JSON:", data)

    try:
        messages = data["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            msg = messages[0]
            user_phone = msg["from"]
            user_msg = msg["text"]["body"]

            print(f"üí¨ {user_phone}: {user_msg}")

            start_followup_thread()

            if USER_STATE.get(user_phone, {}).get("last_message") == user_msg:
                print("‚ö†Ô∏è “ö–∞–π—Ç–∞–ª–∞—É ‚Äî ”©—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä–µ–º—ñ–∑")
                return jsonify({"status": "duplicate"}), 200

            reply = get_gpt_response(user_msg, user_phone)
            for part in split_message(reply):
                send_whatsapp_message(user_phone, part)

    except Exception as e:
        print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ “õ–∞—Ç–µ—Å—ñ: {e}")

    return jsonify({"status": "ok"}), 200

@app.route('/', methods=['GET'])
def home():
    return "Healvix –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!", 200

from datetime import datetime, timedelta

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====

SALESRENDER_URL = "https://de.backend.salesrender.com/companies/1123/CRM"
SALESRENDER_TOKEN = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RlLmJhY2tlbmQuc2FsZXNyZW5kZXIuY29tLyIsImF1ZCI6IkNSTSIsImp0aSI6ImI4MjZmYjExM2Q4YjZiMzM3MWZmMTU3MTMwMzI1MTkzIiwiaWF0IjoxNzU0NzM1MDE3LCJ0eXBlIjoiYXBpIiwiY2lkIjoiMTEyMyIsInJlZiI6eyJhbGlhcyI6IkFQSSIsImlkIjoiMiJ9fQ.z6NiuV4g7bbdi_1BaRfEqDj-oZKjjniRJoQYKgWsHcc"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
last_sent = {}

# ==== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp ====
def handle_manager_message(phone, text):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp —á–µ—Ä–µ–∑ 360dialog.
    """
    payload = {
        "messaging_product": "whatsapp",  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ø–æ–ª–µ!
        "to": phone,
        "type": "text",
        "text": {
            "body": text
        }
    }

    print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp: {phone} ‚Üí {text}")
    print(f"[DEBUG] Payload: {payload}")

    try:
        response = requests.post(
            WHATSAPP_API_URL,
            headers=HEADERS,
            json=payload,
            timeout=10
        )
        print(f"[DEBUG] –û—Ç–≤–µ—Ç WhatsApp API: {response.status_code} {response.text}")
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp: {e}")

# ==== –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ CRM ====
def fetch_order_from_crm(order_id):
    headers = {
        "Content-Type": "application/json",
        "Authorization": SALESRENDER_TOKEN
    }
    query = {
        "query": f"""
        query {{
            ordersFetcher(filters: {{ include: {{ ids: ["{order_id}"] }} }}) {{
                orders {{
                    id
                    data {{
                        humanNameFields {{
                            value {{
                                firstName
                                lastName
                            }}
                        }}
                        phoneFields {{
                            value {{
                                international
                                raw
                                national
                            }}
                        }}
                    }}
                }}
            }}
        }}
        """
    }
    try:
        response = requests.post(SALESRENDER_URL, headers=headers, json=query, timeout=10)
        response.raise_for_status()
        data = response.json().get("data", {}).get("ordersFetcher", {}).get("orders", [])
        return data[0] if data else None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ CRM API: {e}")
        return None


# ==== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ====
def process_salesrender_order(order):
    try:
        # –ï—Å–ª–∏ customer –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑ CRM
        if not order.get("customer") and "id" in order:
            print(f"‚ö† customer –ø—É—Å—Ç, –ø–æ–¥—Ç—è–≥–∏–≤–∞—é –∏–∑ CRM –ø–æ ID {order['id']}")
            full_order = fetch_order_from_crm(order["id"])
            if full_order:
                order = full_order
            else:
                print("‚ùå CRM –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                return

        first_name = ""
        last_name = ""
        phone = ""

        if "customer" in order:
            first_name = order.get("customer", {}).get("name", {}).get("firstName", "").strip()
            last_name = order.get("customer", {}).get("name", {}).get("lastName", "").strip()
            phone = order.get("customer", {}).get("phone", {}).get("raw", "").strip()
        else:
            human_fields = order.get("data", {}).get("humanNameFields", [])
            phone_fields = order.get("data", {}).get("phoneFields", [])
            if human_fields:
                first_name = human_fields[0].get("value", {}).get("firstName", "").strip()
                last_name = human_fields[0].get("value", {}).get("lastName", "").strip()
            if phone_fields:
                phone = phone_fields[0].get("value", {}).get("international", "").strip()

        name = f"{first_name} {last_name}".strip()

        if not phone:
            print("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            return

        now = datetime.utcnow()
        if phone in last_sent and now - last_sent[phone] < timedelta(minutes=3):
            print(f"‚ö† –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –Ω–µ–¥–æ–∑–≤–æ–Ω –ø–æ {phone} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (UTC+6)
        now_kz = now + timedelta(hours=6)
        if 5 <= now_kz.hour < 12:
            greeting = "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£"
        elif 12 <= now_kz.hour < 18:
            greeting = "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ"
        else:
            greeting = "“ö–∞–π—ã—Ä–ª—ã –∫–µ—à"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
        try:
            if name:
                prompt = (
                    f"{greeting}! –ö–ª–∏–µ–Ω—Ç—Ç—ñ“£ –∞—Ç—ã {name}. "
                    f"–û“ì–∞–Ω “õ–æ“£—ã—Ä–∞—É —à–∞–ª–¥—ã“õ, –±—ñ—Ä–∞“õ –±–∞–π–ª–∞–Ω—ã—Å –±–æ–ª–º–∞–¥—ã. "
                    f"–ö–ª–∏–µ–Ω—Ç–∫–µ WhatsApp-—Ç–∞ “õ—ã—Å“õ–∞, –∂—ã–ª—ã, –¥–æ—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑—ã“£—ã–∑. "
                    f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –ê–π–¥–æ—Å –∞—Ç—ã–Ω–∞–Ω Healvix –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–∞–Ω –∂–∞–∑—ã“£—ã–∑."
                )
            else:
                prompt = (
                    f"{greeting}! –ë—ñ–∑ –∫–ª–∏–µ–Ω—Ç–∫–µ “õ–æ“£—ã—Ä–∞—É —à–∞–ª–¥—ã“õ, –±—ñ—Ä–∞“õ –±–∞–π–ª–∞–Ω—ã—Å –±–æ–ª–º–∞–¥—ã. "
                    f"–ö–ª–∏–µ–Ω—Ç–∫–µ WhatsApp-—Ç–∞ “õ—ã—Å“õ–∞, –∂—ã–ª—ã, –¥–æ—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑—ã“£—ã–∑. "
                    f"–•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –ê–π–¥–æ—Å –∞—Ç—ã–Ω–∞–Ω Healvix –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–∞–Ω –∂–∞–∑—ã“£—ã–∑. "
                    f"–ï—Å—ñ–º—ñ–Ω “õ–æ–ª–¥–∞–Ω–±–∞“£—ã–∑."
                )

            gpt_response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            message_text = gpt_response.choices[0].message.content.strip()
        except Exception as e:
            print(f"‚ùå GPT “õ–∞—Ç–µ—Å—ñ: {e}")
            message_text = f"{greeting}! –ë—ñ–∑ —Å—ñ–∑–≥–µ “õ–æ“£—ã—Ä–∞—É —à–∞–ª–¥—ã“õ, –±—ñ—Ä–∞“õ –±–∞–π–ª–∞–Ω—ã—Å –±–æ–ª–º–∞–¥—ã. –£–∞“õ—ã—Ç—ã“£—ã–∑ –±–æ–ª—Å–∞, —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è)
        handle_manager_message(phone, message_text)

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        last_sent[phone] = now
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

# ==== –í–µ–±—Ö—É–∫ ====
@app.route('/salesrender-hook', methods=['POST'])
def salesrender_hook():
    print("=== –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ /salesrender-hook ===")
    try:
        data = request.get_json()
        print("Payload:", data)

        orders = (
            data.get("data", {}).get("orders")
            or data.get("orders")
            or [data]
        )

        if not orders or not isinstance(orders, list):
            return jsonify({"error": "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤"}), 400

        threading.Thread(
            target=process_salesrender_order,
            args=(orders[0],),
            daemon=True
        ).start()

        return jsonify({"status": "accepted"}), 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
