import os
import requests
from flask import Flask, request, jsonify
from openai import OpenAI

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤–º–µ—Å—Ç–æ –±–∞–∑—ã)
USER_STATES = {}

# AIDA –ø—Ä–æ–º–ø—Ç
BASE_PROMPT = (
    "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑—Ä–µ–Ω–∏—è. –°–ª–µ–¥—É–π –º–æ–¥–µ–ª–∏ AIDA:\n"
    "1. Attention: –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑—Ä–µ–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 35 –ª–µ—Ç).\n"
    "2. Interest: —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ Healvix (—á–µ—Ä–Ω–∏–∫–∞, –ª—é—Ç–µ–∏–Ω, —Ç–∞—É—Ä–∏–Ω).\n"
    "3. Desire: –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ—Ç –ø–æ–±–æ—á–µ–∫, –º–æ–∂–Ω–æ —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏.\n"
    "4. Action: –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—É–ø–∏—Ç—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n"
    "–†–∞–±–æ—Ç–∞–π –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º, –æ–ø—Ä–µ–¥–µ–ª—è—è —è–∑—ã–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    "–†–∞–±–æ—Ç–∞–π —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏. –ù–µ –±—É–¥—å –Ω–∞–≤—è–∑—á–∏–≤—ã–º, –Ω–æ –≤–µ–¥–∏ –∫ –ø–æ–∫—É–ø–∫–µ.\n"
)

def send_whatsapp_message(phone, message):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
    print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.text}")
    return response

def get_gpt_response(user_msg, user_phone):
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": BASE_PROMPT},
                {"role": "user", "content": user_msg}
            ],
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()
        
        # –û–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        USER_STATES[user_phone] = {"last_message": user_msg}
        
        return reply
    except Exception as e:
        print(f"‚ùå GPT –æ—à–∏–±–∫–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –í—Ö–æ–¥—è—â–∏–π JSON:", data)

    try:
        messages = data["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            message = messages[0]
            user_msg = message["text"]["body"]
            user_phone = message["from"]

            print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_phone}: {user_msg}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–æ–µ –∂–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º —Å–Ω–æ–≤–∞
            if USER_STATES.get(user_phone, {}).get("last_message") == user_msg:
                print("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return jsonify({"status": "duplicate"}), 200

            reply = get_gpt_response(user_msg, user_phone)
            send_whatsapp_message(user_phone, reply)

            # TODO: —Å—é–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM webhook

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return jsonify({"status": "ok"}), 200

@app.route('/', methods=['GET'])
def home():
    return "–ë–æ—Ç Healvix –∞–∫—Ç–∏–≤–µ–Ω!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
