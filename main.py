import os
import requests
from flask import Flask, request, jsonify
from openai import OpenAI

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤
USER_STATES = {}

# –ë–∞–∑–æ–≤—ã–π system-–ø—Ä–æ–º–ø—Ç
BASE_PROMPT = """
–¢—ã —É–º–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É Healvix ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑—Ä–µ–Ω–∏—è.
–†–∞–±–æ—Ç–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞, —Å–ª–µ–¥—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä–µ AIDA:

1. Attention ‚Äî –ó–∞—Ü–µ–ø–∏: –∑—Ä–µ–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ 35 –ª–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ —Å –≥–∞–¥–∂–µ—Ç–∞–º–∏.
2. Interest ‚Äî –†–∞—Å—Å–∫–∞–∂–∏: Healvix ‚Äî —á–µ—Ä–Ω–∏–∫–∞, –ª—é—Ç–µ–∏–Ω, —Ç–∞—É—Ä–∏–Ω. –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤.
3. Desire ‚Äî –û–±—ä—è—Å–Ω–∏: –±–µ–∑–æ–ø–∞—Å–µ–Ω, –±–µ–∑ –ø–æ–±–æ—á–µ–∫, –º–æ–∂–Ω–æ —Å –ª—é–±—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏.
4. Action ‚Äî –ú—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏: "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?"

‚ÄºÔ∏è–†–∞–±–æ—Ç–∞–π –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π).
‚ÄºÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–ø–æ–∫–æ–π–Ω–æ: –ø—Ä–æ —Ü–µ–Ω—É, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
‚ÄºÔ∏è–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –æ—Å—Ç–∞–≤—å –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ –¥–∞–≤–∏.

–ü—Ä–∏–º–µ—Ä –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:
- –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ? ‚Üí –î–∞, –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö, –º–æ–∂–Ω–æ –¥–∞–∂–µ —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏.
- –ê –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–º–æ–∂–µ—Ç? ‚Üí –£–∂–µ –ø–æ–º–æ–≥ –±–æ–ª–µ–µ 10 000+ –ª—é–¥—è–º, —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 1 –∫—É—Ä—Å.
- –ê —ç—Ç–æ –Ω–µ —Ä–µ–∫–ª–∞–º–∞? ‚Üí –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. –û–±—â–∞–π—Å—è –∂–∏–≤–æ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫. –í–µ–¥–∏ –∫ –¥–∏–∞–ª–æ–≥—É, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π—Å—è.
"""

def send_whatsapp_message(phone, message):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
    print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.text}")
    return response

def get_gpt_response(user_msg, user_phone):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        history = USER_STATES.get(user_phone, {}).get("history", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
        messages = [{"role": "system", "content": BASE_PROMPT}]
        for h in history:
            messages.append({"role": "user", "content": h["user"]})
            messages.append({"role": "assistant", "content": h["bot"]})
        messages.append({"role": "user", "content": user_msg})

        # GPT-4o –æ—Ç–≤–µ—Ç
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        USER_STATES[user_phone] = {
            "last_message": user_msg,
            "history": history[-4:] + [{"user": user_msg, "bot": reply}]
        }

        return reply
    except Exception as e:
        print(f"‚ùå GPT –æ—à–∏–±–∫–∞: {e}")
        return "“ö–∞—Ç–µ–ª—ñ–∫ –æ—Ä—ã–Ω –∞–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –í—Ö–æ–¥—è—â–∏–π JSON:", data)

    try:
        messages = data["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            msg = messages[0]
            user_msg = msg["text"]["body"]
            user_phone = msg["from"]

            print(f"üí¨ –û—Ç {user_phone}: {user_msg}")

            # –ò–≥–Ω–æ—Ä –µ—Å–ª–∏ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
            if USER_STATES.get(user_phone, {}).get("last_message") == user_msg:
                print("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return jsonify({"status": "duplicate"}), 200

            # GPT –æ—Ç–≤–µ—Ç
            reply = get_gpt_response(user_msg, user_phone)
            send_whatsapp_message(user_phone, reply)

            # üîó CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
            # crm_payload = {"phone": user_phone, "text": user_msg}
            # requests.post("https://–≤–∞—à_crm_webhook_url", json=crm_payload)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return jsonify({"status": "ok"}), 200

@app.route('/', methods=['GET'])
def home():
    return "Healvix –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
