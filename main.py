# üí° –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-–±–æ—Ç–∞ Healvix —Å —Ä–∞–±–æ—á–∏–º follow-up

import os
import time
import threading
import requests
from flask import Flask, request, jsonify
from openai import OpenAI

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

USER_STATE = {}

FOLLOW_UP_DELAY = 60  # 1 –º–∏–Ω—É—Ç
FOLLOW_UP_MESSAGE = (
    "–°—ñ–∑–¥–µ–Ω –∂–∞—É–∞–ø –±–æ–ª–º–∞–π –∂–∞—Ç—ã—Ä ü§î –ö”©–º–µ–∫ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞, “õ–∞–∑—ñ—Ä –∂–∞–∑—É“ì–∞ –±–æ–ª–∞–¥—ã. "
    "–ë—ã–ª–∞–π —ñ—Å—Ç–µ–π—ñ–∫: –º–µ–Ω ”©–∑ –∞—Ç—ã–º–Ω–∞–Ω –∂–µ“£—ñ–ª–¥—ñ–∫ –∂–∞—Å–∞–ø –∫”©—Ä–µ–π—ñ–Ω. “ö–∞–∑—ñ—Ä –ö–∞—Å–ø–∏–π–¥–µ 5-10 –º—ã“£ –±–∞—Ä –º–∞?"
)

# ... (SALES_SCRIPT_PROMPT –∏ STAGE_PROMPTS –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø send_whatsapp_message ---
def send_whatsapp_message(phone, message):
    try:
        payload = {
            "messaging_product": "whatsapp",
            "to": phone,
            "type": "text",
            "text": {"body": message}
        }
        response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
        print(f"\U0001F4E4 WhatsApp –∂–∞—É–∞–ø: {response.status_code} | {response.text}")
        return response
    except Exception as e:
        print(f"‚ùå WhatsApp “õ–∞—Ç–µ—Å—ñ: {e}")
        return None

# --- follow-up checker –° –õ–û–ì–ê–ú–ò ---
def follow_up_checker():
    print("üöÄ Follow-up checker –∑–∞–ø—É—â–µ–Ω!")
    while True:
        now = time.time()
        for phone, state in list(USER_STATE.items()):
            last_time = state.get("last_time")
            last_stage = state.get("stage", "0")
            followed_up = state.get("followed_up", False)

            if last_time:
                elapsed = now - last_time
                print(f"[‚è±Ô∏è] {phone}: –ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫ | stage={last_stage} | follow_up={followed_up}")
                if elapsed > FOLLOW_UP_DELAY and not followed_up:
                    print(f"[üîî] –û—Ç–ø—Ä–∞–≤–∫–∞ follow-up –∫–ª–∏–µ–Ω—Ç—É {phone}")
                    send_whatsapp_message(phone, "üìå –ê–π–¥–æ—Å: " + FOLLOW_UP_MESSAGE)
                    USER_STATE[phone]["followed_up"] = True
            else:
                print(f"[‚ö†Ô∏è] {phone} ‚Äî –Ω–µ—Ç last_time")

        time.sleep(30)

# --- –ó–∞–ø—É—Å–∫ follow-up –ø–æ—Ç–æ–∫–∞ –±–µ–∑ —É—Å–ª–æ–≤–∏—è if __name__ ---
threading.Thread(target=follow_up_checker, daemon=True).start()

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (get_gpt_response, split_message, webhook –∏ —Ç.–¥.) ---
# --- –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ get_gpt_response ---

@app.route("/", methods=["GET"])
def home():
    return "Healvix –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
