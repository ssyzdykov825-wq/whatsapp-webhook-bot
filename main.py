# üí° –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-–±–æ—Ç–∞ Healvix —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç—Ç–∞–ø–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞

import os
import requests
from flask import Flask, request, jsonify
from openai import OpenAI

app = Flask(__name__)
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")

HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

USER_STATE = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π SALES_SCRIPT_PROMPT —Å –∂–∏–≤—ã–º —Å—Ç–∏–ª–µ–º –∏ —à–∞–±–ª–æ–Ω-—Ñ—Ä–∞–∑–∞–º–∏
SALES_SCRIPT_PROMPT = """
(–≤–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π prompt –∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω ‚Äî —Å–º. –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥)
"""

STAGE_PROMPTS = {
    "0": "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –°—ñ–∑–≥–µ Healvix –∫”©–∑ –µ–º–¥–µ—É –æ—Ä—Ç–∞–ª—ã“ì—ã–Ω–∞–Ω —Ö–∞–±–∞—Ä–ª–∞—Å—ã–ø –æ—Ç—ã—Ä–º—ã–Ω. “ö–∞–ª—ã“£—ã–∑ “õ–∞–ª–∞–π? –°—ñ–∑–¥–µ –∫”©—Ä—É–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –º”ô—Å–µ–ª–µ –±–∞—Ä –º–∞, ”©–∑—ñ“£—ñ–∑–¥–µ –º–µ ”ô–ª–¥–µ –∂–∞“õ—ã–Ω—ã“£—ã–∑–¥–∞ –º–∞?",
    "1": "–ö”©–∑—ñ“£—ñ–∑–¥–µ “õ–∞–Ω–¥–∞–π –±–µ–ª–≥—ñ–ª–µ—Ä –º–∞–∑–∞–ª–∞–π–¥—ã? –ë“±–ª–¥—ã—Ä –∫”©—Ä—É, “õ—ã–∑–∞—Ä—É, –∂—ã–ª–∞—É –Ω–µ–º–µ—Å–µ –∫–∞—Ç–∞—Ä–∞–∫—Ç–∞ —Å–∏—è“õ—Ç—ã –º”ô—Å–µ–ª–µ–ª–µ—Ä –±–∞—Ä –º–∞?",
    "2": "–°–æ–ª –±–µ–ª–≥—ñ–ª–µ—Ä “õ–∞–Ω—à–∞ —É–∞“õ—ã—Ç –±–æ–ª–¥—ã? –°–æ“£“ì—ã —Ä–µ—Ç –¥”ô—Ä—ñ–≥–µ—Ä–≥–µ “õ–∞—Ä–∞–ª–¥—ã“£—ã–∑ –±–∞? –ö–∞–ø–ª—è–ª–∞—Ä, –ª–∏–Ω–∑–∞ “õ–æ–ª–¥–∞–Ω–¥—ã“£—ã–∑ –±–∞?",
    "3": "–°–æ–ª “Ø—à—ñ–Ω –±—ñ–∑ “±—Å—ã–Ω–∞—Ç—ã–Ω Healvix ”©–Ω—ñ–º—ñ ‚Äî 100% —Ç–∞–±–∏“ì–∏, “õ“±—Ä–∞–º—ã–Ω–¥–∞ “õ–∞—Ä–∞–∂–∏–¥–µ–∫, –ª—é—Ç–µ–∏–Ω, –ï –≤–∏—Ç–∞–º–∏–Ω—ñ –±–∞—Ä. –ö”©–∑ —Ç–∞–º—ã—Ä–ª–∞—Ä—ã–Ω –∫“Ø—à–µ–π—Ç–µ–¥—ñ, –∫”©—Ä—É–¥—ñ –∂–∞“õ—Å–∞—Ä—Ç–∞–¥—ã.",
    "4": "–ë—ñ–∑–¥–µ –±—ñ—Ä–Ω–µ—à–µ –µ–º –∫—É—Ä—Å—ã –±–∞—Ä. –ú—ã—Å–∞–ª—ã, 3 –∞–π ‚Äî 85 000 —Ç–≥, 6 –∞–π ‚Äî 180 000 —Ç–≥. –°—ñ–∑–≥–µ “õ–∞–Ω–¥–∞–π –∫—É—Ä—Å —Ç–∏—ñ–º–¥—ñ –±–æ–ª–∞–¥—ã?",
    "5": "–ö”©–ø –∫–ª–∏–µ–Ω—Ç —Ç–µ —Å–µ–Ω—ñ–º—Å—ñ–∑–¥—ñ–∫–ø–µ–Ω “õ–∞—Ä–∞–π–¥—ã. –ë—ñ—Ä–∞“õ ”©–Ω—ñ–º—ñ–º—ñ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—Ç–∞–ª“ì–∞–Ω, —Ç–∞–±–∏“ì–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–º–∞—Å–∞ ‚Äî –∞“õ—à–∞–Ω—ã “õ–∞–π—Ç–∞—Ä–∞–º—ã–∑.",
    "6": "–û–Ω–¥–∞ –±“Ø–≥—ñ–Ω –∑–∞–∫–∞–∑–¥—ã —Ç—ñ—Ä–∫–µ–π—ñ–∫. –ö–∞—Å–ø–∏–π –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –∞–π—Ç—ã–ø –∂—ñ–±–µ—Ä—Å–µ“£—ñ–∑, –∞–ª–¥—ã–Ω –∞–ª–∞ —Ç”©–ª–µ–º–º–µ–Ω —Ä”ô—Å—ñ–º–¥–µ–π–º—ñ–∑."
}

def split_message(text, max_length=1000):
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind(". ")
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

def send_whatsapp_message(phone, message):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    response = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload)
    print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.text}")
    return response

def get_gpt_response(user_msg, user_phone):
    try:
        user_data = USER_STATE.get(user_phone, {})
        history = user_data.get("history", [])
        stage = user_data.get("stage", "0")

        prompt = SALES_SCRIPT_PROMPT + "\n\n" + STAGE_PROMPTS.get(stage, "")

        messages = [{"role": "system", "content": prompt}]
        for item in history:
            messages.append({"role": "user", "content": item["user"]})
            messages.append({"role": "assistant", "content": item["bot"]})
        messages.append({"role": "user", "content": user_msg})

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()

        next_stage = str(int(stage) + 1) if int(stage) < 6 else "6"

        USER_STATE[user_phone] = {
            "history": history[-5:] + [{"user": user_msg, "bot": reply}],
            "last_message": user_msg,
            "stage": next_stage
        }

        return reply
    except Exception as e:
        print(f"‚ùå GPT “õ–∞—Ç–µ—Å—ñ: {e}")
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, “õ–∞–∑—ñ—Ä –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–π–º—ã–Ω. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ –∫”©—Ä—ñ“£—ñ–∑."

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ö–µ–ª–≥–µ–Ω JSON:", data)

    try:
        messages = data["entry"][0]["changes"][0]["value"].get("messages")
        if messages:
            msg = messages[0]
            user_phone = msg["from"]
            user_msg = msg["text"]["body"]

            print(f"üí¨ {user_phone}: {user_msg}")

            if USER_STATE.get(user_phone, {}).get("last_message") == user_msg:
                print("‚ö†Ô∏è “ö–∞–π—Ç–∞–ª–∞—É ‚Äî ”©—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä–µ–º—ñ–∑")
                return jsonify({"status": "duplicate"}), 200

            reply = get_gpt_response(user_msg, user_phone)
            for part in split_message(reply):
                send_whatsapp_message(user_phone, part)

    except Exception as e:
        print(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ “õ–∞—Ç–µ—Å—ñ: {e}")

    return jsonify({"status": "ok"}), 200

@app.route('/', methods=['GET'])
def home():
    return "Healvix –±–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
