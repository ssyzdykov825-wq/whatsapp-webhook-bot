# main.py
import os
import time
import json
import requests
import psycopg2
from flask import Flask, request, jsonify
from openai import OpenAI
from salesrender_api import create_order, client_exists  # —Ç–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ CRM

# ================== ENV ==================
DATABASE_URL    = os.environ.get("DATABASE_URL")       # postgres://user:pass@host:port/db
OPENAI_API_KEY  = os.environ.get("OPENAI_API_KEY")     # –∫–ª—é—á OpenAI
WHATSAPP_API_KEY = os.environ.get("WHATSAPP_API_KEY")  # –∫–ª—é—á 360dialog

WHATSAPP_API_URL = "https://waba-v2.360dialog.io/messages"
HEADERS = {
    "Content-Type": "application/json",
    "D360-API-KEY": WHATSAPP_API_KEY
}

# ================== APP / GPT ==================
app = Flask(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)

# ================== DB helpers ==================
def db_exec(sql, params=None, fetchone=False, fetchall=False):
    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor()
    cur.execute(sql, params or [])
    data = None
    if fetchone:
        data = cur.fetchone()
    elif fetchall:
        data = cur.fetchall()
    conn.commit()
    cur.close()
    conn.close()
    return data

def init_db():
    # —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π
    db_exec("""
        CREATE TABLE IF NOT EXISTS processed_messages (
            id TEXT PRIMARY KEY
        );
    """)

    # —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_exec("""
        CREATE TABLE IF NOT EXISTS user_state (
            phone        TEXT PRIMARY KEY,
            stage        TEXT DEFAULT '0',
            history      TEXT DEFAULT '[]',
            last_message TEXT,
            last_time    DOUBLE PRECISION,
            followed_up  BOOLEAN DEFAULT FALSE,
            in_crm       BOOLEAN DEFAULT FALSE
        );
    """)

    # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã BOOLEAN –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    db_exec("""
DO $$
BEGIN
    -- followed_up
    IF EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_name='user_state' AND column_name='followed_up' AND data_type<>'boolean'
    ) THEN
        ALTER TABLE user_state ALTER COLUMN followed_up DROP DEFAULT;
        ALTER TABLE user_state ALTER COLUMN followed_up TYPE BOOLEAN USING (followed_up::boolean);
        ALTER TABLE user_state ALTER COLUMN followed_up SET DEFAULT FALSE;
    END IF;

    -- in_crm
    IF EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_name='user_state' AND column_name='in_crm' AND data_type<>'boolean'
    ) THEN
        ALTER TABLE user_state ALTER COLUMN in_crm DROP DEFAULT;
        ALTER TABLE user_state ALTER COLUMN in_crm TYPE BOOLEAN USING (in_crm::boolean);
        ALTER TABLE user_state ALTER COLUMN in_crm SET DEFAULT FALSE;
    END IF;
END $$;
""")  # <-- –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è db_exec

init_db()

# ================== Utils ==================
def split_message(text, max_length=1000):
    parts = []
    text = text or ""
    while len(text) > max_length:
        split_index = text[:max_length].rfind(". ")
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index+1].strip())
        text = text[split_index+1:].strip()
    if text:
        parts.append(text)
    return parts

def is_message_processed(msg_id: str) -> bool:
    row = db_exec("SELECT 1 FROM processed_messages WHERE id=%s;", (msg_id,), fetchone=True)
    return row is not None

def add_processed_message(msg_id: str):
    db_exec("INSERT INTO processed_messages (id) VALUES (%s) ON CONFLICT DO NOTHING;", (msg_id,))

# ================== User state ==================
def get_user_state(phone: str):
    row = db_exec("""
        SELECT stage, history, last_message, last_time, followed_up, in_crm
        FROM user_state WHERE phone=%s;
    """, (phone,), fetchone=True)
    if not row:
        return None
    stage, history_json, last_message, last_time, followed_up, in_crm = row
    try:
        history = json.loads(history_json or "[]")
    except Exception:
        history = []
    return {
        "stage": stage or "0",
        "history": history,
        "last_message": last_message,
        "last_time": last_time,
        "followed_up": bool(followed_up),
        "in_crm": bool(in_crm),
    }

def set_user_state(phone: str, stage, history, last_message, last_time, followed_up, in_crm=False):
    history_json = json.dumps(history or [])
    db_exec("""
        INSERT INTO user_state (phone, stage, history, last_message, last_time, followed_up, in_crm)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (phone) DO UPDATE SET
            stage=%s, history=%s, last_message=%s, last_time=%s, followed_up=%s, in_crm=%s;
    """, (
        phone, stage, history_json, last_message, last_time, bool(followed_up), bool(in_crm),
        stage, history_json, last_message, last_time, bool(followed_up), bool(in_crm)
    ))

# ================== CRM gate ==================
def process_new_lead(name: str, phone: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ CRM, —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –Ω–∞–¥–æ, —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ in_crm=True."""
    state = get_user_state(phone)
    if state and state.get("in_crm"):
        print(f"‚ö†Ô∏è {phone} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ in_crm=True ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return None

    if client_exists(phone):
        print(f"‚ö†Ô∏è {phone} –Ω–∞–π–¥–µ–Ω –≤ CRM ‚Äî –æ—Ç–º–µ—á–∞–µ–º in_crm=True")
        set_user_state(phone, stage="0", history=[], last_message=None, last_time=None, followed_up=False, in_crm=True)
        return None

    order_id = create_order(name, phone)
    if order_id:
        print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è {name} ({phone})")
        set_user_state(phone, stage="0", history=[], last_message=None, last_time=None, followed_up=False, in_crm=True)
        return order_id
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è {name} ({phone})")
        return None

# ================== WhatsApp (360dialog) ==================
def send_whatsapp_360(phone: str, message: str):
    payload = {
        "messaging_product": "whatsapp",
        "to": phone,
        "type": "text",
        "text": {"body": message}
    }
    try:
        resp = requests.post(WHATSAPP_API_URL, headers=HEADERS, json=payload, timeout=30)
        print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç 360dialog: {resp.status_code} {resp.text}")
        return resp
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 360dialog: {e}")

# ================== GPT core ==================
SALES_SCRIPT_PROMPT = "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
STAGE_PROMPTS = {
    "0": "–ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∏ —É—Ç–æ—á–Ω–∏ –∑–∞–¥–∞—á—É.",
    "1": "–£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∏ –±—é–¥–∂–µ—Ç.",
    "2": "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.",
    "3": "–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—ã–≥–æ–¥—ã –∏ –¥–µ–¥–ª–∞–π–Ω.",
    "4": "–ó–∞–∫—Ä–æ–π –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ.",
    "5": "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∏ –∑–∞–∫—Ä–µ–ø–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.",
    "6": "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ."
}

def get_gpt_response(user_msg: str, user_phone: str) -> str:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_state(user_phone) or {
        "history": [],
        "stage": "0",
        "last_message": None,
        "last_time": None,
        "followed_up": False,
        "in_crm": False
    }

    history = user_data["history"]
    stage = user_data["stage"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π prompt —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ stage
    prompt = SALES_SCRIPT_PROMPT + "\n\n" + STAGE_PROMPTS.get(stage, "")

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è GPT
    messages = [{"role": "system", "content": prompt}]
    for item in history[-20:]:
        if "user" in item:
            messages.append({"role": "user", "content": item["user"]})
        if "bot" in item:
            messages.append({"role": "assistant", "content": item["bot"]})
    messages.append({"role": "user", "content": user_msg})

    # –ó–∞–ø—Ä–æ—Å –∫ GPT
    resp = client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7
    )
    reply = resp.choices[0].message.content.strip()

    # –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ stage
    next_stage = stage

    if stage == "0":
        # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—à–ª–æ –∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å/–∑–∞–ø—Ä–æ—Å
        if any(word in user_msg.lower() for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—É—Å–ª—É–≥–∞", "–æ—Ñ–æ—Ä–º–∏—Ç—å"]):
            next_stage = "1"
    elif stage == "1":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –±—é–¥–∂–µ—Ç
        if any(word in user_msg.lower() for word in ["—Ö–æ—á—É", "–∑–∞–∫–∞–∑–∞—Ç—å", "–æ—Ñ–æ—Ä–º–∏—Ç—å"]):
            next_stage = "2"
    elif stage == "2":
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        next_stage = "3"  # –ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å
    # stage 3‚Äì6 –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–¥–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä)
    new_history = (history + [{"user": user_msg, "bot": reply}])[-20:]
    set_user_state(
        phone=user_phone,
        stage=next_stage,
        history=new_history,
        last_message=user_msg,
        last_time=time.time(),
        followed_up=False,
        in_crm=user_data.get("in_crm", False)
    )

    return reply
    
# ================== Webhook (360dialog —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥—è—â–∏—Ö) ==================
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì© –ö–µ–ª–≥–µ–Ω JSON:", data)

    try:
        entry = data.get("entry", [])[0]
        change = entry.get("changes", [])[0]
        value = change.get("value", {})

        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã (sent/delivered/read)
        if value.get("statuses") and not value.get("messages"):
            return jsonify({"status": "status_event"}), 200

        messages = value.get("messages", [])
        contacts = value.get("contacts", [])

        if not messages:
            return jsonify({"status": "no_message"}), 200

        msg = messages[0]
        msg_id = msg["id"]

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
        if is_message_processed(msg_id):
            print(f"‚è© –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return jsonify({"status": "duplicate"}), 200
        add_processed_message(msg_id)

        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if msg.get("type") != "text":
            print("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø:", msg.get("type"))
            return jsonify({"status": "unsupported_type"}), 200

        user_phone = msg["from"]
        user_msg = msg["text"]["body"]
        full_name = contacts[0]["profile"].get("name", "–ö–ª–∏–µ–Ω—Ç") if contacts else "–ö–ª–∏–µ–Ω—Ç"

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä (–¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
        norm_phone = user_phone.replace("+", "").replace(" ", "").replace("-", "")

        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = get_user_state(norm_phone)
        if not user_state:
            # –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –≤ CRM
            order_id = process_new_lead(full_name, norm_phone)
            if order_id:
                print(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω ({full_name}, {norm_phone})")
            else:
                print(f"‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç {norm_phone} —É–∂–µ –µ—Å—Ç—å –≤ CRM –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, history –ø—É—Å—Ç–∞—è
            set_user_state(
                norm_phone,
                stage="0",
                history=[],
                last_message=None,
                last_time=None,
                followed_up=False,
                in_crm=True
            )
        else:
            # —É–∂–µ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é stage –∏ –∏—Å—Ç–æ—Ä–∏—é
            print(f"‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç {norm_phone} —É–∂–µ –≤ –±–∞–∑–µ, stage={user_state['stage']}, –∏—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–∞={len(user_state['history'])}")

        # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç GPT —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
        reply = get_gpt_response(user_msg, norm_phone)

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp (–µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–µ–∂–µ–º –Ω–∞ —á–∞—Å—Ç–∏)
        for part in split_message(reply):
            send_whatsapp_360(norm_phone, part)

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({"status": "error", "error": str(e)}), 500

@app.route('/', methods=['GET'])
def health():
    return 'ok', 200

# ================== Run ==================
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
